<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>multiMavenWeb</groupId>
    <artifactId>multiMavenWeb</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>lhx.web</module>
        <module>lhx.war</module>
        <module>lhx.dao</module>
    </modules>


    <properties>
        <!-- spring版本号 -->
        <spring.version>3.2.4.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.2.4</mybatis.version>
        <!-- log4j日志文件管理包版本 -->
        <slf4j.version>1.6.6</slf4j.version>
        <log4j.version>1.2.9</log4j.version>
        <!--jersey版本号 -->
        <jersey.version>1.17.1</jersey.version>
    </properties>

    <dependencies>
        <!-- spring核心包 -->
        <!-- springframe start -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- springframe end -->

        <!-- mybatis核心包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!-- mybatis/spring包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!-- mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.29</version>
        </dependency>
        <!-- junit测试包 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- 阿里巴巴数据源包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- json数据 -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <!-- 日志文件管理包 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- log end -->

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>

        <!--七牛-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>[7.0.0, 7.0.99]</version>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>pili-sdk-java</artifactId>
            <version>1.5.4</version>
        </dependency>


        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>


        <!-- jersey管理包 start -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-apache-client</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-json</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-client</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-spring</artifactId>
            <version>${jersey.version}</version>
            <!-- 去除自带的spring版本 -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>spring-web</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- jersey end -->

    </dependencies>


</project>







package com.dt.word.poi;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class blog {
    public static void main(String[] args) throws Exception {
        //测试添加图片
        String sourceFile = "D:\\123.docx";
        String targetFile = "D:\\123.doc";
        addStampImage(sourceFile, targetFile);
    }

    public static void addStampImage(String sourceFile, String targetFile) {
        XWPFDocument doc;
        try {
            InputStream inputStream = new FileInputStream(sourceFile);
            doc = new XWPFDocument(inputStream);
            for (XWPFTable table : doc.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        //遍历每一个单元格
                        if (cell.getText().contains("&章")) {
                            //如果遇到"&章"则进行替换
                            try {
                                insertCellStamp(cell);
                                //给带有要盖章字样的单元格 加上章的图片
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }

            FileOutputStream fos = new FileOutputStream(targetFile);
            doc.write(fos);
            fos.close();
            doc.write(new FileOutputStream(targetFile));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertCellStamp(XWPFTableCell cell) throws InvalidFormatException, IOException {
        //给带有要盖章字样的单元格 加上章的图片
        List<String> stamps = new ArrayList<>();//存放要加入的图片
        int stampOrder = 0;//图片的序号，从0开始
        // 获取需要的图片，
        for (XWPFParagraph para : cell.getParagraphs()) {
            String paraText = para.getText();
            //从段落中获取要盖的章的名称
            // System.out.println("para.getText():" + paraText);
            if (paraText != null) {
                String[] split = para.getText().split(" ");
                for (String s : split) {
                    s = s.trim();
                    if (!s.isEmpty()) {
                        stamps.add(s.replace("&章", ""));
                        //如：&章公章01.png，去掉标识符&章，只留下章的名字
                    }
                }
            }
        }

        String basedir = "D:";
        for (XWPFParagraph para : cell.getParagraphs()) {
            for (XWPFRun run : para.getRuns()) {
                run.setText("", 0);
                //清空所有文字
            }
            // for (int i =para.getRuns().size()-1 ; i>=0; i--) {
            // XWPFRun run = para.getRuns().get(i);
            // System.out.println("清空所有文字后：run.getText(0): " + run.getText(0));
            // }
            //
            // 插入图片
            for (int i = 0; i < stamps.size() && i < para.getRuns().size(); i++) {
                try {
                    XWPFRun run = para.getRuns().get(i);
                    String imgFile = basedir + "/" + stamps.get(stampOrder++);
                    System.out.println("插入盖章图片:" + imgFile);
                    FileInputStream is = new FileInputStream(imgFile);
                    run.addPicture(is, XWPFDocument.PICTURE_TYPE_JPEG, imgFile, Units.toEMU(100), Units.toEMU(100));
                    // 100x100 pixels
                    is.close();
                    run.setText(" ", 0);
                } catch (Exception e) {
                    System.out.println("Error: ======== 插入单个公章图片时出错了:可能是图片路径不存在。不影响主流程");
                    e.printStackTrace();
                }
            }
        }
    }
}






package com.dt.word.itextWord;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import com.jacob.com.ComThread;

public class WordInsertPicture {
    public WordInsertPicture() {
    }

    // 声明一个静态的类实例化对象
    private static WordInsertPicture instance;
    // 声明word文档对象
    private Dispatch doc = null;
    // 声明word文档当前活动视窗对象
    private Dispatch activeWindow = null;
    // 声明word文档选定区域或插入点对象
    private Dispatch docSelection = null;
    // 声明所有word文档集合对象
    private Dispatch wrdDocs = null;
    // 声明word文档名称对象
    private String fileName;
    // 声明ActiveX组件对象：word.Application,Excel.Application,Powerpoint.Application等等
    private ActiveXComponent wrdCom;

    /**
     * 获取Word操作静态实例对象
     *
     * @return 报表汇总业务操作
     */
    public final static synchronized WordInsertPicture getInstance() {
        if (instance == null)
            instance = new WordInsertPicture();
        return instance;
    }

    /**
     * 初始化Word对象
     *
     * @return 是否初始化成功
     */
    public boolean initWordObj() {
        boolean retFlag = false;
        ComThread.InitSTA();// 初始化com的线程，非常重要！！使用结束后要调用 realease方法
        wrdCom = new ActiveXComponent("Word.Application");// 实例化ActiveX组件对象：对word进行操作
        try {
            /*
             * 返回wrdCom.Documents的Dispatch
             * 获取Dispatch的Documents对象，可以把每个Dispatch对象看成是对Activex控件的一个操作
             * 这一步是获得该ActiveX控件的控制权。
             */
            wrdDocs = wrdCom.getProperty("Documents").toDispatch();
            // 设置打开的word应用程序是否可见
            wrdCom.setProperty("Visible", new Variant(false));
            retFlag = true;
        } catch (Exception e) {
            retFlag = false;
            e.printStackTrace();
        }
        return retFlag;
    }

    /**
     * 创建一个新的word文档
     *
     */
    public void createNewDocument() {
        // 创建一个新的文档
        doc = Dispatch.call(wrdDocs, "Add").toDispatch();
        // 获得当前word文档文本
        docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 取得活动窗体对象
     *
     */
    public void getActiveWindow() {
        // 获得活动窗体对象
        activeWindow = wrdCom.getProperty("ActiveWindow").toDispatch();
    }

    /**
     * 打开一个已存在的文档
     *
     * @param docPath
     */
    public void openDocument(String docPath) {
        if (this.doc != null) {
            this.closeDocument();
        }
        this.doc = Dispatch.call(wrdDocs, "Open", docPath).toDispatch();
        this.docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 关闭当前word文档
     *
     */
    public void closeDocument() {
        if (this.doc != null) {
            Dispatch.call(this.doc, "Save");
            Dispatch.call(this.doc, "Close", new Variant(true));
            this.doc = null;
        }
    }

    /**
     * 文档设置图片水印
     *
     * @param waterMarkPath
     *            水印路径
     */
    public void setWaterMark(String waterMarkPath) {
        // 取得活动窗格对象
        Dispatch activePan = Dispatch.get(this.activeWindow, "ActivePane")
                .toDispatch();
        // 取得视窗对象
        Dispatch view = Dispatch.get(activePan, "View").toDispatch();
        // 打开页眉，值为9，页脚为10
        Dispatch.put(view, "SeekView", new Variant(9));
        // 获取页眉和页脚
        Dispatch headfooter = Dispatch.get(this.docSelection, "HeaderFooter")
                .toDispatch();
        // 获取水印图形对象
        Dispatch shapes = Dispatch.get(headfooter, "Shapes").toDispatch();
        // 给文档全部加上水印,设置了水印效果，内容，字体，大小，是否加粗，是否斜体，左边距，上边距。
        // 调用shapes对象的AddPicture方法将全路径为picname的图片插入当前文档
        Dispatch picture = Dispatch.call(shapes, "AddPicture", waterMarkPath)
                .toDispatch();
        // 选择当前word文档的水印
        Dispatch.call(picture, "Select");
        Dispatch.put(picture, "Left", new Variant(250));
        Dispatch.put(picture, "Top", new Variant(480));
        Dispatch.put(picture, "Width", new Variant(167));
        Dispatch.put(picture, "Height", new Variant(167));

        // 关闭页眉
        Dispatch.put(view, "SeekView", new Variant(0));
    }

    /**
     * 关闭Word资源
     *
     *
     */
    public void closeWordObj() {
        // 关闭word文件
        wrdCom.invoke("Quit", new Variant[] {});
        // 释放com线程。根据jacob的帮助文档，com的线程回收不由java的垃圾回收器处理
        ComThread.Release();
    }

    /**
     * 得到文件名
     *
     * @return .
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * 设置文件名
     *
     * @param fileName
     *            .
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * 开始为word文档添加水印
     *
     * @param wordPath
     *            word文档的路径
     * @param waterMarkPath
     *            添加的水印图片路径
     * @return 是否成功添加
     */
    public boolean addWaterMark(String wordPath, String waterMarkPath) {
        try {
            if (initWordObj()) {
                openDocument(wordPath);
                getActiveWindow();
                setWaterMark(waterMarkPath);
                closeDocument();
                closeWordObj();
                return true;

            } else
                return false;
        } catch (Exception e) {
            e.printStackTrace();
            closeDocument();
            closeWordObj();
            return false;
        }
    }

    /**
     * 测试功能
     *
     */
    public static void main(String[] argv) {
        WordInsertPicture wordObj = WordInsertPicture.getInstance();
        boolean aa =  wordObj.addWaterMark("d:/124.doc", "d:\\signet.png");
        System.out.println(aa);
    }

}


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
SragcCsGi+92r7ILtOmydQ==


