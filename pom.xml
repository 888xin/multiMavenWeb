<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>multiMavenWeb</groupId>
    <artifactId>multiMavenWeb</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>lhx.web</module>
        <module>lhx.war</module>
        <module>lhx.dao</module>
    </modules>


    <properties>
        <!-- spring版本号 -->
        <spring.version>3.2.4.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.2.4</mybatis.version>
        <!-- log4j日志文件管理包版本 -->
        <slf4j.version>1.6.6</slf4j.version>
        <log4j.version>1.2.9</log4j.version>
        <!--jersey版本号 -->
        <jersey.version>1.17.1</jersey.version>
    </properties>

    <dependencies>
        <!-- spring核心包 -->
        <!-- springframe start -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- springframe end -->

        <!-- mybatis核心包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!-- mybatis/spring包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!-- mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.29</version>
        </dependency>
        <!-- junit测试包 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- 阿里巴巴数据源包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- json数据 -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <!-- 日志文件管理包 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- log end -->

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>

        <!--七牛-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>[7.0.0, 7.0.99]</version>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>pili-sdk-java</artifactId>
            <version>1.5.4</version>
        </dependency>


        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>


        <!-- jersey管理包 start -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-apache-client</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-json</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-client</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-spring</artifactId>
            <version>${jersey.version}</version>
            <!-- 去除自带的spring版本 -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>spring-web</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- jersey end -->

    </dependencies>


</project>


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
LzPuy7lv1FANbt7C8pIJSA==




package com.dt.word.poi;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class blog {
    public static void main(String[] args) throws Exception {
        //测试添加图片
        String sourceFile = "D:\\123.docx";
        String targetFile = "D:\\123.doc";
        addStampImage(sourceFile, targetFile);
    }

    public static void addStampImage(String sourceFile, String targetFile) {
        XWPFDocument doc;
        try {
            InputStream inputStream = new FileInputStream(sourceFile);
            doc = new XWPFDocument(inputStream);
            for (XWPFTable table : doc.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        //遍历每一个单元格
                        if (cell.getText().contains("&章")) {
                            //如果遇到"&章"则进行替换
                            try {
                                insertCellStamp(cell);
                                //给带有要盖章字样的单元格 加上章的图片
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }

            FileOutputStream fos = new FileOutputStream(targetFile);
            doc.write(fos);
            fos.close();
            doc.write(new FileOutputStream(targetFile));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertCellStamp(XWPFTableCell cell) throws InvalidFormatException, IOException {
        //给带有要盖章字样的单元格 加上章的图片
        List<String> stamps = new ArrayList<>();//存放要加入的图片
        int stampOrder = 0;//图片的序号，从0开始
        // 获取需要的图片，
        for (XWPFParagraph para : cell.getParagraphs()) {
            String paraText = para.getText();
            //从段落中获取要盖的章的名称
            // System.out.println("para.getText():" + paraText);
            if (paraText != null) {
                String[] split = para.getText().split(" ");
                for (String s : split) {
                    s = s.trim();
                    if (!s.isEmpty()) {
                        stamps.add(s.replace("&章", ""));
                        //如：&章公章01.png，去掉标识符&章，只留下章的名字
                    }
                }
            }
        }

        String basedir = "D:";
        for (XWPFParagraph para : cell.getParagraphs()) {
            for (XWPFRun run : para.getRuns()) {
                run.setText("", 0);
                //清空所有文字
            }
            // for (int i =para.getRuns().size()-1 ; i>=0; i--) {
            // XWPFRun run = para.getRuns().get(i);
            // System.out.println("清空所有文字后：run.getText(0): " + run.getText(0));
            // }
            //
            // 插入图片
            for (int i = 0; i < stamps.size() && i < para.getRuns().size(); i++) {
                try {
                    XWPFRun run = para.getRuns().get(i);
                    String imgFile = basedir + "/" + stamps.get(stampOrder++);
                    System.out.println("插入盖章图片:" + imgFile);
                    FileInputStream is = new FileInputStream(imgFile);
                    run.addPicture(is, XWPFDocument.PICTURE_TYPE_JPEG, imgFile, Units.toEMU(100), Units.toEMU(100));
                    // 100x100 pixels
                    is.close();
                    run.setText(" ", 0);
                } catch (Exception e) {
                    System.out.println("Error: ======== 插入单个公章图片时出错了:可能是图片路径不存在。不影响主流程");
                    e.printStackTrace();
                }
            }
        }
    }
}






package com.dt.word.itextWord;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import com.jacob.com.ComThread;

public class WordInsertPicture {
    public WordInsertPicture() {
    }

    // 声明一个静态的类实例化对象
    private static WordInsertPicture instance;
    // 声明word文档对象
    private Dispatch doc = null;
    // 声明word文档当前活动视窗对象
    private Dispatch activeWindow = null;
    // 声明word文档选定区域或插入点对象
    private Dispatch docSelection = null;
    // 声明所有word文档集合对象
    private Dispatch wrdDocs = null;
    // 声明word文档名称对象
    private String fileName;
    // 声明ActiveX组件对象：word.Application,Excel.Application,Powerpoint.Application等等
    private ActiveXComponent wrdCom;

    /**
     * 获取Word操作静态实例对象
     *
     * @return 报表汇总业务操作
     */
    public final static synchronized WordInsertPicture getInstance() {
        if (instance == null)
            instance = new WordInsertPicture();
        return instance;
    }

    /**
     * 初始化Word对象
     *
     * @return 是否初始化成功
     */
    public boolean initWordObj() {
        boolean retFlag = false;
        ComThread.InitSTA();// 初始化com的线程，非常重要！！使用结束后要调用 realease方法
        wrdCom = new ActiveXComponent("Word.Application");// 实例化ActiveX组件对象：对word进行操作
        try {
            /*
             * 返回wrdCom.Documents的Dispatch
             * 获取Dispatch的Documents对象，可以把每个Dispatch对象看成是对Activex控件的一个操作
             * 这一步是获得该ActiveX控件的控制权。
             */
            wrdDocs = wrdCom.getProperty("Documents").toDispatch();
            // 设置打开的word应用程序是否可见
            wrdCom.setProperty("Visible", new Variant(false));
            retFlag = true;
        } catch (Exception e) {
            retFlag = false;
            e.printStackTrace();
        }
        return retFlag;
    }

    /**
     * 创建一个新的word文档
     *
     */
    public void createNewDocument() {
        // 创建一个新的文档
        doc = Dispatch.call(wrdDocs, "Add").toDispatch();
        // 获得当前word文档文本
        docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 取得活动窗体对象
     *
     */
    public void getActiveWindow() {
        // 获得活动窗体对象
        activeWindow = wrdCom.getProperty("ActiveWindow").toDispatch();
    }

    /**
     * 打开一个已存在的文档
     *
     * @param docPath
     */
    public void openDocument(String docPath) {
        if (this.doc != null) {
            this.closeDocument();
        }
        this.doc = Dispatch.call(wrdDocs, "Open", docPath).toDispatch();
        this.docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 关闭当前word文档
     *
     */
    public void closeDocument() {
        if (this.doc != null) {
            Dispatch.call(this.doc, "Save");
            Dispatch.call(this.doc, "Close", new Variant(true));
            this.doc = null;
        }
    }

    /**
     * 文档设置图片水印
     *
     * @param waterMarkPath
     *            水印路径
     */
    public void setWaterMark(String waterMarkPath) {
        // 取得活动窗格对象
        Dispatch activePan = Dispatch.get(this.activeWindow, "ActivePane")
                .toDispatch();
        // 取得视窗对象
        Dispatch view = Dispatch.get(activePan, "View").toDispatch();
        // 打开页眉，值为9，页脚为10
        Dispatch.put(view, "SeekView", new Variant(9));
        // 获取页眉和页脚
        Dispatch headfooter = Dispatch.get(this.docSelection, "HeaderFooter")
                .toDispatch();
        // 获取水印图形对象
        Dispatch shapes = Dispatch.get(headfooter, "Shapes").toDispatch();
        // 给文档全部加上水印,设置了水印效果，内容，字体，大小，是否加粗，是否斜体，左边距，上边距。
        // 调用shapes对象的AddPicture方法将全路径为picname的图片插入当前文档
        Dispatch picture = Dispatch.call(shapes, "AddPicture", waterMarkPath)
                .toDispatch();
        // 选择当前word文档的水印
        Dispatch.call(picture, "Select");
        Dispatch.put(picture, "Left", new Variant(250));
        Dispatch.put(picture, "Top", new Variant(480));
        Dispatch.put(picture, "Width", new Variant(167));
        Dispatch.put(picture, "Height", new Variant(167));

        // 关闭页眉
        Dispatch.put(view, "SeekView", new Variant(0));
    }

    /**
     * 关闭Word资源
     *
     *
     */
    public void closeWordObj() {
        // 关闭word文件
        wrdCom.invoke("Quit", new Variant[] {});
        // 释放com线程。根据jacob的帮助文档，com的线程回收不由java的垃圾回收器处理
        ComThread.Release();
    }

    /**
     * 得到文件名
     *
     * @return .
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * 设置文件名
     *
     * @param fileName
     *            .
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * 开始为word文档添加水印
     *
     * @param wordPath
     *            word文档的路径
     * @param waterMarkPath
     *            添加的水印图片路径
     * @return 是否成功添加
     */
    public boolean addWaterMark(String wordPath, String waterMarkPath) {
        try {
            if (initWordObj()) {
                openDocument(wordPath);
                getActiveWindow();
                setWaterMark(waterMarkPath);
                closeDocument();
                closeWordObj();
                return true;

            } else
                return false;
        } catch (Exception e) {
            e.printStackTrace();
            closeDocument();
            closeWordObj();
            return false;
        }
    }

    /**
     * 测试功能
     *
     */
    public static void main(String[] argv) {
        WordInsertPicture wordObj = WordInsertPicture.getInstance();
        boolean aa =  wordObj.addWaterMark("d:/124.doc", "d:\\signet.png");
        System.out.println(aa);
    }

}





