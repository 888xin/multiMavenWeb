<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>multiMavenWeb</groupId>
    <artifactId>multiMavenWeb</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>lhx.web</module>
        <module>lhx.war</module>
        <module>lhx.dao</module>
    </modules>


    <properties>
        <!-- spring版本号 -->
        <spring.version>3.2.4.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.2.4</mybatis.version>
        <!-- log4j日志文件管理包版本 -->
        <slf4j.version>1.6.6</slf4j.version>
        <log4j.version>1.2.9</log4j.version>
        <!--jersey版本号 -->
        <jersey.version>1.17.1</jersey.version>
    </properties>

    <dependencies>
        <!-- spring核心包 -->
        <!-- springframe start -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- springframe end -->

        <!-- mybatis核心包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!-- mybatis/spring包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!-- mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.29</version>
        </dependency>
        <!-- junit测试包 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- 阿里巴巴数据源包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- json数据 -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <!-- 日志文件管理包 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- log end -->

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>

        <!--七牛-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>[7.0.0, 7.0.99]</version>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>pili-sdk-java</artifactId>
            <version>1.5.4</version>
        </dependency>


        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>


        <!-- jersey管理包 start -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-apache-client</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-json</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-client</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-spring</artifactId>
            <version>${jersey.version}</version>
            <!-- 去除自带的spring版本 -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>spring-web</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- jersey end -->

    </dependencies>


</project>







package com.dt.word.poi;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class blog {
    public static void main(String[] args) throws Exception {
        //测试添加图片
        String sourceFile = "D:\\123.docx";
        String targetFile = "D:\\123.doc";
        addStampImage(sourceFile, targetFile);
    }

    public static void addStampImage(String sourceFile, String targetFile) {
        XWPFDocument doc;
        try {
            InputStream inputStream = new FileInputStream(sourceFile);
            doc = new XWPFDocument(inputStream);
            for (XWPFTable table : doc.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        //遍历每一个单元格
                        if (cell.getText().contains("&章")) {
                            //如果遇到"&章"则进行替换
                            try {
                                insertCellStamp(cell);
                                //给带有要盖章字样的单元格 加上章的图片
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }

            FileOutputStream fos = new FileOutputStream(targetFile);
            doc.write(fos);
            fos.close();
            doc.write(new FileOutputStream(targetFile));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertCellStamp(XWPFTableCell cell) throws InvalidFormatException, IOException {
        //给带有要盖章字样的单元格 加上章的图片
        List<String> stamps = new ArrayList<>();//存放要加入的图片
        int stampOrder = 0;//图片的序号，从0开始
        // 获取需要的图片，
        for (XWPFParagraph para : cell.getParagraphs()) {
            String paraText = para.getText();
            //从段落中获取要盖的章的名称
            // System.out.println("para.getText():" + paraText);
            if (paraText != null) {
                String[] split = para.getText().split(" ");
                for (String s : split) {
                    s = s.trim();
                    if (!s.isEmpty()) {
                        stamps.add(s.replace("&章", ""));
                        //如：&章公章01.png，去掉标识符&章，只留下章的名字
                    }
                }
            }
        }

        String basedir = "D:";
        for (XWPFParagraph para : cell.getParagraphs()) {
            for (XWPFRun run : para.getRuns()) {
                run.setText("", 0);
                //清空所有文字
            }
            // for (int i =para.getRuns().size()-1 ; i>=0; i--) {
            // XWPFRun run = para.getRuns().get(i);
            // System.out.println("清空所有文字后：run.getText(0): " + run.getText(0));
            // }
            //
            // 插入图片
            for (int i = 0; i < stamps.size() && i < para.getRuns().size(); i++) {
                try {
                    XWPFRun run = para.getRuns().get(i);
                    String imgFile = basedir + "/" + stamps.get(stampOrder++);
                    System.out.println("插入盖章图片:" + imgFile);
                    FileInputStream is = new FileInputStream(imgFile);
                    run.addPicture(is, XWPFDocument.PICTURE_TYPE_JPEG, imgFile, Units.toEMU(100), Units.toEMU(100));
                    // 100x100 pixels
                    is.close();
                    run.setText(" ", 0);
                } catch (Exception e) {
                    System.out.println("Error: ======== 插入单个公章图片时出错了:可能是图片路径不存在。不影响主流程");
                    e.printStackTrace();
                }
            }
        }
    }
}






package com.dt.word.itextWord;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import com.jacob.com.ComThread;

public class WordInsertPicture {
    public WordInsertPicture() {
    }

    // 声明一个静态的类实例化对象
    private static WordInsertPicture instance;
    // 声明word文档对象
    private Dispatch doc = null;
    // 声明word文档当前活动视窗对象
    private Dispatch activeWindow = null;
    // 声明word文档选定区域或插入点对象
    private Dispatch docSelection = null;
    // 声明所有word文档集合对象
    private Dispatch wrdDocs = null;
    // 声明word文档名称对象
    private String fileName;
    // 声明ActiveX组件对象：word.Application,Excel.Application,Powerpoint.Application等等
    private ActiveXComponent wrdCom;

    /**
     * 获取Word操作静态实例对象
     *
     * @return 报表汇总业务操作
     */
    public final static synchronized WordInsertPicture getInstance() {
        if (instance == null)
            instance = new WordInsertPicture();
        return instance;
    }

    /**
     * 初始化Word对象
     *
     * @return 是否初始化成功
     */
    public boolean initWordObj() {
        boolean retFlag = false;
        ComThread.InitSTA();// 初始化com的线程，非常重要！！使用结束后要调用 realease方法
        wrdCom = new ActiveXComponent("Word.Application");// 实例化ActiveX组件对象：对word进行操作
        try {
            /*
             * 返回wrdCom.Documents的Dispatch
             * 获取Dispatch的Documents对象，可以把每个Dispatch对象看成是对Activex控件的一个操作
             * 这一步是获得该ActiveX控件的控制权。
             */
            wrdDocs = wrdCom.getProperty("Documents").toDispatch();
            // 设置打开的word应用程序是否可见
            wrdCom.setProperty("Visible", new Variant(false));
            retFlag = true;
        } catch (Exception e) {
            retFlag = false;
            e.printStackTrace();
        }
        return retFlag;
    }

    /**
     * 创建一个新的word文档
     *
     */
    public void createNewDocument() {
        // 创建一个新的文档
        doc = Dispatch.call(wrdDocs, "Add").toDispatch();
        // 获得当前word文档文本
        docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 取得活动窗体对象
     *
     */
    public void getActiveWindow() {
        // 获得活动窗体对象
        activeWindow = wrdCom.getProperty("ActiveWindow").toDispatch();
    }

    /**
     * 打开一个已存在的文档
     *
     * @param docPath
     */
    public void openDocument(String docPath) {
        if (this.doc != null) {
            this.closeDocument();
        }
        this.doc = Dispatch.call(wrdDocs, "Open", docPath).toDispatch();
        this.docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 关闭当前word文档
     *
     */
    public void closeDocument() {
        if (this.doc != null) {
            Dispatch.call(this.doc, "Save");
            Dispatch.call(this.doc, "Close", new Variant(true));
            this.doc = null;
        }
    }

    /**
     * 文档设置图片水印
     *
     * @param waterMarkPath
     *            水印路径
     */
    public void setWaterMark(String waterMarkPath) {
        // 取得活动窗格对象
        Dispatch activePan = Dispatch.get(this.activeWindow, "ActivePane")
                .toDispatch();
        // 取得视窗对象
        Dispatch view = Dispatch.get(activePan, "View").toDispatch();
        // 打开页眉，值为9，页脚为10
        Dispatch.put(view, "SeekView", new Variant(9));
        // 获取页眉和页脚
        Dispatch headfooter = Dispatch.get(this.docSelection, "HeaderFooter")
                .toDispatch();
        // 获取水印图形对象
        Dispatch shapes = Dispatch.get(headfooter, "Shapes").toDispatch();
        // 给文档全部加上水印,设置了水印效果，内容，字体，大小，是否加粗，是否斜体，左边距，上边距。
        // 调用shapes对象的AddPicture方法将全路径为picname的图片插入当前文档
        Dispatch picture = Dispatch.call(shapes, "AddPicture", waterMarkPath)
                .toDispatch();
        // 选择当前word文档的水印
        Dispatch.call(picture, "Select");
        Dispatch.put(picture, "Left", new Variant(250));
        Dispatch.put(picture, "Top", new Variant(480));
        Dispatch.put(picture, "Width", new Variant(167));
        Dispatch.put(picture, "Height", new Variant(167));

        // 关闭页眉
        Dispatch.put(view, "SeekView", new Variant(0));
    }

    /**
     * 关闭Word资源
     *
     *
     */
    public void closeWordObj() {
        // 关闭word文件
        wrdCom.invoke("Quit", new Variant[] {});
        // 释放com线程。根据jacob的帮助文档，com的线程回收不由java的垃圾回收器处理
        ComThread.Release();
    }

    /**
     * 得到文件名
     *
     * @return .
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * 设置文件名
     *
     * @param fileName
     *            .
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * 开始为word文档添加水印
     *
     * @param wordPath
     *            word文档的路径
     * @param waterMarkPath
     *            添加的水印图片路径
     * @return 是否成功添加
     */
    public boolean addWaterMark(String wordPath, String waterMarkPath) {
        try {
            if (initWordObj()) {
                openDocument(wordPath);
                getActiveWindow();
                setWaterMark(waterMarkPath);
                closeDocument();
                closeWordObj();
                return true;

            } else
                return false;
        } catch (Exception e) {
            e.printStackTrace();
            closeDocument();
            closeWordObj();
            return false;
        }
    }

    /**
     * 测试功能
     *
     */
    public static void main(String[] argv) {
        WordInsertPicture wordObj = WordInsertPicture.getInstance();
        boolean aa =  wordObj.addWaterMark("d:/124.doc", "d:\\signet.png");
        System.out.println(aa);
    }

}




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
jZ0595keN7gRvsAzeTsyTw==


                 
                 
                 
                 
                 
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
               
                 
                 





U2FsdGVkX18XR8d/Oqpr/Wx9BebC3KWq7Qv7MVDGPhYQahx3nThPLkRj58wSOI0H
MyfeOZQqJfS3ODGMfHLW0OitZJI3UfiPkFkOvzVnHv1lfRx+W8+DIHfaW6el5xnj
IW5EcU4tHntUcEGrjrB7ZgcEzahL9OM2i1qns4rZOpeV87exm3y/3XOwBztSckAk
CTl6FxW0jSFIGnR++EiyjkWklOAkTSUjyB0NED/i7evVSwqf+s6AL5eTiyhk8u8R
BJnvwSEUBrt7lkFWKhKLffz4I9xyDBjgo1ovIIkrqpVEZuKN5Nq8uRwLbc1LzCTi
6IMpFOR8gJ7uyi9KRQnb0wsUWB58WWQR6K3dFxLMIXOfOXmezKg5zcDICyPwewWx
AdlIQ9GJJI5hvkLdOPmFNAF71olWu4TAoNsO/YQU/8fZWegWCyB+8+fJp4PEOOdR
94gK1ZO54IoTbWaZf7yfeTiuJ6hWzc/2FcSXJFb3VUNW2/RGuwbc/Da0PgQgRkBx
cRYSkr2vLOGOMbeLg90jYGgP0xBgcrHfagKFEPxFDIKBYZgJEpzA2NajelgfGszn
aSKH+cSK2E31SxQSDMIuymwdWbP0vbbngbugU1MEjfzSIBvl4E2uDZjg8PeUTXJ9
iGdxxzdMs7uC3Z97VxYf4Y7cuPpiyiYET0cLVDt54uB4WqxoCy9LWC981sKwWUGd
OY8t1wx3FXu8IODEbSQIC2qjKsN+KobSSpGXJ+y+OTWjSm2l4/6sg9wURstxcMnV
XmwXDuiQ220tV/DLt4xbWQGo4/AYRq6ues3OTupfq/8nWzbvHMhsMexqs6UnuHp1
eGnmcJbObKO+C7qN4esZTSkL+OFZT1XlD+qNg9X7O4Q=

