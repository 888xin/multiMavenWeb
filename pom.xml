<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>multiMavenWeb</groupId>
    <artifactId>multiMavenWeb</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>lhx.web</module>
        <module>lhx.war</module>
        <module>lhx.dao</module>
    </modules>


    <properties>
        <!-- spring版本号 -->
        <spring.version>3.2.4.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.2.4</mybatis.version>
        <!-- log4j日志文件管理包版本 -->
        <slf4j.version>1.6.6</slf4j.version>
        <log4j.version>1.2.9</log4j.version>
        <!--jersey版本号 -->
        <jersey.version>1.17.1</jersey.version>
    </properties>

    <dependencies>
        <!-- spring核心包 -->
        <!-- springframe start -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- springframe end -->

        <!-- mybatis核心包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!-- mybatis/spring包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!-- mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.29</version>
        </dependency>
        <!-- junit测试包 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- 阿里巴巴数据源包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- json数据 -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <!-- 日志文件管理包 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- log end -->

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>

        <!--七牛-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>[7.0.0, 7.0.99]</version>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>pili-sdk-java</artifactId>
            <version>1.5.4</version>
        </dependency>


        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>


        <!-- jersey管理包 start -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-apache-client</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-bundle</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-core</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-json</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-client</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-spring</artifactId>
            <version>${jersey.version}</version>
            <!-- 去除自带的spring版本 -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>spring-web</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- jersey end -->

    </dependencies>


</project>







package com.dt.word.poi;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class blog {
    public static void main(String[] args) throws Exception {
        //测试添加图片
        String sourceFile = "D:\\123.docx";
        String targetFile = "D:\\123.doc";
        addStampImage(sourceFile, targetFile);
    }

    public static void addStampImage(String sourceFile, String targetFile) {
        XWPFDocument doc;
        try {
            InputStream inputStream = new FileInputStream(sourceFile);
            doc = new XWPFDocument(inputStream);
            for (XWPFTable table : doc.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        //遍历每一个单元格
                        if (cell.getText().contains("&章")) {
                            //如果遇到"&章"则进行替换
                            try {
                                insertCellStamp(cell);
                                //给带有要盖章字样的单元格 加上章的图片
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }

            FileOutputStream fos = new FileOutputStream(targetFile);
            doc.write(fos);
            fos.close();
            doc.write(new FileOutputStream(targetFile));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertCellStamp(XWPFTableCell cell) throws InvalidFormatException, IOException {
        //给带有要盖章字样的单元格 加上章的图片
        List<String> stamps = new ArrayList<>();//存放要加入的图片
        int stampOrder = 0;//图片的序号，从0开始
        // 获取需要的图片，
        for (XWPFParagraph para : cell.getParagraphs()) {
            String paraText = para.getText();
            //从段落中获取要盖的章的名称
            // System.out.println("para.getText():" + paraText);
            if (paraText != null) {
                String[] split = para.getText().split(" ");
                for (String s : split) {
                    s = s.trim();
                    if (!s.isEmpty()) {
                        stamps.add(s.replace("&章", ""));
                        //如：&章公章01.png，去掉标识符&章，只留下章的名字
                    }
                }
            }
        }

        String basedir = "D:";
        for (XWPFParagraph para : cell.getParagraphs()) {
            for (XWPFRun run : para.getRuns()) {
                run.setText("", 0);
                //清空所有文字
            }
            // for (int i =para.getRuns().size()-1 ; i>=0; i--) {
            // XWPFRun run = para.getRuns().get(i);
            // System.out.println("清空所有文字后：run.getText(0): " + run.getText(0));
            // }
            //
            // 插入图片
            for (int i = 0; i < stamps.size() && i < para.getRuns().size(); i++) {
                try {
                    XWPFRun run = para.getRuns().get(i);
                    String imgFile = basedir + "/" + stamps.get(stampOrder++);
                    System.out.println("插入盖章图片:" + imgFile);
                    FileInputStream is = new FileInputStream(imgFile);
                    run.addPicture(is, XWPFDocument.PICTURE_TYPE_JPEG, imgFile, Units.toEMU(100), Units.toEMU(100));
                    // 100x100 pixels
                    is.close();
                    run.setText(" ", 0);
                } catch (Exception e) {
                    System.out.println("Error: ======== 插入单个公章图片时出错了:可能是图片路径不存在。不影响主流程");
                    e.printStackTrace();
                }
            }
        }
    }
}






package com.dt.word.itextWord;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import com.jacob.com.ComThread;

public class WordInsertPicture {
    public WordInsertPicture() {
    }

    // 声明一个静态的类实例化对象
    private static WordInsertPicture instance;
    // 声明word文档对象
    private Dispatch doc = null;
    // 声明word文档当前活动视窗对象
    private Dispatch activeWindow = null;
    // 声明word文档选定区域或插入点对象
    private Dispatch docSelection = null;
    // 声明所有word文档集合对象
    private Dispatch wrdDocs = null;
    // 声明word文档名称对象
    private String fileName;
    // 声明ActiveX组件对象：word.Application,Excel.Application,Powerpoint.Application等等
    private ActiveXComponent wrdCom;

    /**
     * 获取Word操作静态实例对象
     *
     * @return 报表汇总业务操作
     */
    public final static synchronized WordInsertPicture getInstance() {
        if (instance == null)
            instance = new WordInsertPicture();
        return instance;
    }

    /**
     * 初始化Word对象
     *
     * @return 是否初始化成功
     */
    public boolean initWordObj() {
        boolean retFlag = false;
        ComThread.InitSTA();// 初始化com的线程，非常重要！！使用结束后要调用 realease方法
        wrdCom = new ActiveXComponent("Word.Application");// 实例化ActiveX组件对象：对word进行操作
        try {
            /*
             * 返回wrdCom.Documents的Dispatch
             * 获取Dispatch的Documents对象，可以把每个Dispatch对象看成是对Activex控件的一个操作
             * 这一步是获得该ActiveX控件的控制权。
             */
            wrdDocs = wrdCom.getProperty("Documents").toDispatch();
            // 设置打开的word应用程序是否可见
            wrdCom.setProperty("Visible", new Variant(false));
            retFlag = true;
        } catch (Exception e) {
            retFlag = false;
            e.printStackTrace();
        }
        return retFlag;
    }

    /**
     * 创建一个新的word文档
     *
     */
    public void createNewDocument() {
        // 创建一个新的文档
        doc = Dispatch.call(wrdDocs, "Add").toDispatch();
        // 获得当前word文档文本
        docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 取得活动窗体对象
     *
     */
    public void getActiveWindow() {
        // 获得活动窗体对象
        activeWindow = wrdCom.getProperty("ActiveWindow").toDispatch();
    }

    /**
     * 打开一个已存在的文档
     *
     * @param docPath
     */
    public void openDocument(String docPath) {
        if (this.doc != null) {
            this.closeDocument();
        }
        this.doc = Dispatch.call(wrdDocs, "Open", docPath).toDispatch();
        this.docSelection = Dispatch.get(wrdCom, "Selection").toDispatch();
    }

    /**
     * 关闭当前word文档
     *
     */
    public void closeDocument() {
        if (this.doc != null) {
            Dispatch.call(this.doc, "Save");
            Dispatch.call(this.doc, "Close", new Variant(true));
            this.doc = null;
        }
    }

    /**
     * 文档设置图片水印
     *
     * @param waterMarkPath
     *            水印路径
     */
    public void setWaterMark(String waterMarkPath) {
        // 取得活动窗格对象
        Dispatch activePan = Dispatch.get(this.activeWindow, "ActivePane")
                .toDispatch();
        // 取得视窗对象
        Dispatch view = Dispatch.get(activePan, "View").toDispatch();
        // 打开页眉，值为9，页脚为10
        Dispatch.put(view, "SeekView", new Variant(9));
        // 获取页眉和页脚
        Dispatch headfooter = Dispatch.get(this.docSelection, "HeaderFooter")
                .toDispatch();
        // 获取水印图形对象
        Dispatch shapes = Dispatch.get(headfooter, "Shapes").toDispatch();
        // 给文档全部加上水印,设置了水印效果，内容，字体，大小，是否加粗，是否斜体，左边距，上边距。
        // 调用shapes对象的AddPicture方法将全路径为picname的图片插入当前文档
        Dispatch picture = Dispatch.call(shapes, "AddPicture", waterMarkPath)
                .toDispatch();
        // 选择当前word文档的水印
        Dispatch.call(picture, "Select");
        Dispatch.put(picture, "Left", new Variant(250));
        Dispatch.put(picture, "Top", new Variant(480));
        Dispatch.put(picture, "Width", new Variant(167));
        Dispatch.put(picture, "Height", new Variant(167));

        // 关闭页眉
        Dispatch.put(view, "SeekView", new Variant(0));
    }

    /**
     * 关闭Word资源
     *
     *
     */
    public void closeWordObj() {
        // 关闭word文件
        wrdCom.invoke("Quit", new Variant[] {});
        // 释放com线程。根据jacob的帮助文档，com的线程回收不由java的垃圾回收器处理
        ComThread.Release();
    }

    /**
     * 得到文件名
     *
     * @return .
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * 设置文件名
     *
     * @param fileName
     *            .
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * 开始为word文档添加水印
     *
     * @param wordPath
     *            word文档的路径
     * @param waterMarkPath
     *            添加的水印图片路径
     * @return 是否成功添加
     */
    public boolean addWaterMark(String wordPath, String waterMarkPath) {
        try {
            if (initWordObj()) {
                openDocument(wordPath);
                getActiveWindow();
                setWaterMark(waterMarkPath);
                closeDocument();
                closeWordObj();
                return true;

            } else
                return false;
        } catch (Exception e) {
            e.printStackTrace();
            closeDocument();
            closeWordObj();
            return false;
        }
    }

    /**
     * 测试功能
     *
     */
    public static void main(String[] argv) {
        WordInsertPicture wordObj = WordInsertPicture.getInstance();
        boolean aa =  wordObj.addWaterMark("d:/124.doc", "d:\\signet.png");
        System.out.println(aa);
    }

}





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
3ii93TfiiWldUFX7gEwSVw==
